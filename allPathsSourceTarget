class Solution {
    public void dfs(int[][] graph, int src, int dest, List<List<Integer>> res, List<Integer> curr, boolean[] visited) {
        visited[src] = true;
        curr.add(src);

        if (src == dest) {
            res.add(new ArrayList<>(curr));
        } else {
            for (int nbr : graph[src]) {
                if (!visited[nbr]) {
                    dfs(graph, nbr, dest, res, curr, visited);
                }
            }
        }

        curr.remove(curr.size() - 1);
        visited[src] = false;
    }

    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> curr = new ArrayList<>();
        boolean[] visited = new boolean[graph.length];

        dfs(graph, 0, graph.length - 1, res, curr, visited);
        return res;
    }
}
