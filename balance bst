/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public static void inOrder(TreeNode root,List<Integer> al){
        if(root==null) return;
        inOrder(root.left,al);
        al.add(root.val);
        inOrder(root.right,al);
    }
    public TreeNode balanceBST(TreeNode root) {
            List<Integer> al=new ArrayList<Integer>();
        inOrder(root,al);
        TreeNode node=solver(al,0,al.size()-1);
        return node;
        
    }
    public TreeNode solver(List<Integer> l,int low,int high){
        if(high<low) return null;
        int mid=(low+high)/2;
        TreeNode node=new TreeNode(l.get(mid));
        node.left=solver(l,low,mid-1);
        node.right=solver(l,mid+1,high);
        return node;

    }
    
}
